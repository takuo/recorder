
node {
  def date = sh(script: "TZ=Asia/Tokyo date -d '@${env.STARTAT}' +'%Y年%m月%d日%H:%M'", returnStdout: true)
  currentBuild.displayName = "#${BUILD_NUMBER} - ${env.NAME}"
  currentBuild.description = "[${env.CHANNEL}] ${date} 放送"
}

pipeline {
    agent {
      label 'recorder'
    }
    options {
      throttleJobProperty(
          categories: ['recorder'],
          throttleEnabled: true,
          throttleOption: 'category'
      )
    }
    environment {
        LANG = 'ja_JP.UTF-8'
        TZ = 'Asia/Tokyo'
        TITLE = NAME.replaceAll(/'/, "\\'").replaceAll(/"/, "\\\\\"")

        //def dockerImage = docker.build("recorder", "docker")
        SKICKA_HOME = "/storage/1/jenkins/skicka"
        WINE_HOME = "/storage/1/jenkins/wine"
        UPLOAD_FILENAME = sh (
          script: "date -d '@${env.STARTAT}' +\"/recorder/%Y/%m/%d/[%Y%m%d][%H%M][${env.CHANNEL}]${TITLE}.m2ts\"",
          returnStdout: true).trim().replaceAll(/"/, "\\\"")
        DEPLOY_FILENAME = sh (
          script: "date -d \"@${env.STARTAT}\" +\"[%Y%m%d][${env.CHANNEL}]_%H%M_${TITLE}.mp4\"",
          returnStdout: true).trim().replaceAll(/"/, "\\\"")
        SOURCE_FILENAME = "${BUILD_NUMBER}.m2ts"
    }
    stages {
        stage('prepare') {
          steps {
            sh "rm -rf output *.m2ts *.ts"
            withCredentials([usernameColonPassword(credentialsId: 'epgstation', variable: 'EPGSTATION_AUTH')]) {
              script {
                DESC = ""
                jsonText = sh(script: 'curl -u ${EPGSTATION_AUTH}' + " --output - '${EPGSTATION_URL}api/recorded/${RECORDED_ID}?isHalfWidth=false'", returnStdout: true).trim()
                recorded = readJSON( text: jsonText )
                if (recorded.description != " ") {
                  DESC = recorded.description
                }
                if (recorded.extended != " ") {
                  DESC = recorded.description + "\n\n" + recorded.extended
                }
		sh('curl -u ${EPGSTATION_AUTH}' + " --output ${SOURCE_FILENAME} '${EPGSTATION_URL}api/videos/${RECORDED_ID}?isDownload=true' -H 'accept: video/mp2t'")
              }
            }
          }
        }
        stage('TSSplitter') {
          steps {
            sh "mkdir -p ${WINE_HOME}"
            script {
              docker.image('recorder').inside("-e HOME=${env.WINE_HOME} -e LANG=ja_JP.UTF-8") {
                sh "mkdir -p splitout"
                result = sh(script: "wine /usr/local/bin/TsSplitter.exe -SD -1SEG -SEP -EIT -OUT splitout/ ${env.SOURCE_FILENAME} > /dev/null 2>&1 || echo -n failed", returnStdout: true).trim()
                if (result != "failed") {
                  file = sh(script: "cd splitout; ls -S1 | head -1", returnStdout: true).trim()
                  echo "use \"splitout/${file}\""
                  sh "rm ${SOURCE_FILENAME}"
                  sh "ln \"splitout/${file}\" ${SOURCE_FILENAME}"
                } else {
                  echo "use original source file"
                }
                sh "rm -rf splitout"
              }
            }
          }
        }
        stage('Encoding') {
          steps {
            parallel (
              "upload" : {
                  sh "mkdir -p ${env.SKICKA_HOME}"
                  sh "cp ${SOURCE_FILENAME} ${SKICKA_HOME}"
                  build job: "skicka uploader", wait: false, parameters: [
                    [$class: 'StringParameterValue', name: 'NAME', value: NAME],
                    [$class: 'StringParameterValue', name: 'SOURCE_FILE', value: "${SKICKA_HOME}/${SOURCE_FILENAME}"],
                    [$class: 'StringParameterValue', name: 'DEST_FILE', value: UPLOAD_FILENAME],
                    [$class: 'StringParameterValue', name: 'DESCRIPTION', value: DESC],
                    [$class: 'NodeParameterValue', name: 'nodes', labels: ["${env.NODE_NAME}"], nodeEligibility: [$class: 'AllNodeEligibility']],
                  ]
              },
              "encode" : {
                sh "mkdir -p output"
                script {
                  if (KEEP_SOURCE_FILE == "true") {
                      withCredentials([sshUserPrivateKey(credentialsId: 'deploy-mp4',
                        keyFileVariable: 'identity',
                        passphraseVariable: 'passphrase',
                        usernameVariable: 'user')]) {
                        def filename = KEEP_DIR + "/" + DEPLOY_FILENAME.replaceAll(/.mp4\z/, '.m2ts')
                        def remote = [:]
                        remote.name = DEPLOY_HOST
                        remote.host = remote.name
                        remote.user = user
                        remote.allowAnyHosts = true
                        remote.identityFile = identity
                        remote.passphrase = passphrase
                        sshPut remote: remote, from: "${SOURCE_FILENAME}", into: filename
                     }
                  }
                  if (SKIP_ENCODE == "false") {
                    docker.image("recorder").inside("--group-add video --device /dev/dri:/dev/dri -e LANG=ja_JP.UTF-8") {
                      sh "/usr/local/bin/tsenc ${SOURCE_FILENAME} output/${env.BUILD_NUMBER}.mp4"
                      sh "mediainfo output/${BUILD_NUMBER}.mp4 > output/mediainfo.txt"
                    }
                  }
                 }
              }
            )
          }
        }
        stage('Deploy') {
          steps {
            script {
              if (SKIP_ENCODE == "false") {
                withCredentials([sshUserPrivateKey(credentialsId: 'deploy-mp4',
                  keyFileVariable: 'identity',
                  passphraseVariable: 'passphrase',
                  usernameVariable: 'user')]) {
                  def remote = [:]
                  remote.name = DEPLOY_HOST
                  remote.host = remote.name
                  remote.user = user
                  remote.allowAnyHosts = true
                  remote.identityFile = identity
                  remote.passphrase = passphrase
                  def dst = "${DEPLOY_PATH}/${DEPLOY_FILENAME}"
                  sshPut remote: remote, from: "output/${BUILD_NUMBER}.mp4", into: dst
                  sshCommand remote: remote, command: DEPLOY_EXEC
                }
              }
            }
          }
        }
        stage('Cleanup') {
          steps {
            writeFile file: "output/variable.txt", text: "NAME: ${env.NAME}\nSTARTAT: ${env.STARTAT}\nCHANNEL: ${env.CHANNEL}\nUPLOAD_FILENAME: ${env.UPLOAD_FILENAME}\nRECORDED_ID: ${RECORDED_ID}\nSLACK_TIMESTAMP: ${SLACK_TIMESTAMP}\nNODE: ${env.NODE_NAME}"
            archiveArtifacts artifacts: 'output/*.txt'
            sh 'rm -rf output *.m2ts *.ts'
          }
        }
    }
      post {
        failure {
          slackSend channel: '#jenkins',
            color: 'danger',
            message: "ビルド失敗 `${currentBuild.fullDisplayName}` ${currentBuild.absoluteUrl}"
        }
        fixed {
          slackSend channel: '#jenkins',
            color: 'good',
            message: "ビルド成功 `${currentBuild.fullDisplayName}` ${currentBuild.absoluteUrl}"
        }
      }
}
